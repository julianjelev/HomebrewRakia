/*

-- V1 --------------------------------------------------------------
https://www.vinolab.hr/calculator/gravity-density-sugar-conversions-en19
Calculating °Brix from SG is based on an expression from a polynomial fit to a large data set:
brix = 143.254 * sg^3 - 648.670 * sg^2 + 1125.805 * sg - 620.389

For °Brix to SG, another expression was generated by polynomial analysis:
sg = 0.00000005785037196 * brix^3 + 0.00001261831344 * brix^2 + 0.003873042366 * brix + 0.9999994636

Grams per litre is obviously simply:
gl = 1000 * sg

Grams per litre of dissolved solids is calculated from the specific gravity, and the °Brix.
Subtly, these measure different things, the specific gravity tells us the density of the liquid (grams per litre)
and the °Brix tells us the dissolved solids (percentage mass of solute to solution - grams per 100 grams).
This allows us to calculate the dissolved solids, thus:
dissolved solids(sugar) = sg * (brix * 10)

The chaptalisation calculation is based on calculation of dissolved solids (grams per litre).
The difference between the desired and the current values is then simply multiplied by the number of litres to be chaptalised.

A = Vi * (Sf - Si)

-- V2 --------------------------------------------------------------
http://www.brsquared.org/wine/CalcInfo/addcalc.htm
A = the quantity of sugar to add to the must [g]
Vi = the initial volume of must [L]
Brixi = the initial sugar concentration in the must [°Brix]
Brixf = the desired (final) sugar concentration in the must [°Brix]
Si = the initial sugar concentration in the must [g/l]
Sf = the desired (final) sugar concentration in the must [g/l]
b = number of grams of sugar required to raise volume by 1 litre [g] = 1600(1700)
A = Vi * (Sf - Si) / (1 - (Sf / b));

*/
package com.example.homebrewrakia;

import android.content.Context;
import android.content.res.Resources;

import java.io.IOException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;

public class ChaptalizationService {
    private final Context context;

    private float Brixi;
    private float Vi;
    private float sd;
    private float A;
    private float Brixf;

    private final NumberFormat format;

    public ChaptalizationService(Context con) {
        this.context = con;
        this.Brixi = 20;    //the initial sugar concentration in the must [°Brix]
        this.Vi = 100;      //the initial volume of must [L]
        this.sd = 98;       //the sugar density %
        this.A = 0;         //the quantity of sugar to add to the must [g]
        this.Brixf = 22;    //the desired (final) sugar concentration in the must [°Brix]
        this.format = NumberFormat.getInstance(Locale.getDefault());
    }

    public Map.Entry<Boolean, String> trySetSourceDegree(String value) {
        if (value.equals(""))
            return new AbstractMap.SimpleEntry<>(false, context.getResources().getString(R.string.error_chaptalizationService_setSourceDegree_empty));
        try {
            Number number = format.parse(value);
            float v = Float.parseFloat(String.valueOf(number));
            if (v > 12.0 && v <= 24.0) {
                Brixi = v;
                return new AbstractMap.SimpleEntry<>(true, "");
            }
            else
                return new AbstractMap.SimpleEntry<>(false, context.getResources().getString(R.string.error_chaptalizationService_setSourceDegree_outOfRange));
        }
        catch (NullPointerException | NumberFormatException | ParseException ex) {
            return new AbstractMap.SimpleEntry<>(false, ex.getMessage());
        }
    }

    public Map.Entry<Boolean, String> trySetSourceVolume(String value) {
        if (value.equals(""))
            return new AbstractMap.SimpleEntry<>(false, context.getResources().getString(R.string.error_chaptalizationService_setSourceVolume_empty));
        try {
            Number number = format.parse(value);
            float v = Float.parseFloat(String.valueOf(number));
            if (v > 0.0) {
                Vi = v;
                return new AbstractMap.SimpleEntry<>(true, "");
            }
            else
                return new AbstractMap.SimpleEntry<>(false, context.getResources().getString(R.string.error_chaptalizationService_setSourceVolume_outOfRange));
        }
        catch (NullPointerException | NumberFormatException | ParseException ex) {
            return new AbstractMap.SimpleEntry<>(false, ex.getMessage());
        }
    }

    public Map.Entry<Boolean, String> trySetTargetDegree(String value) {
        if (value.equals(""))
            return new AbstractMap.SimpleEntry<>(false, context.getResources().getString(R.string.error_chaptalizationService_setTargetDegree_empty));
        try {
            Number number = format.parse(value);
            float v = Float.parseFloat(String.valueOf(number));
            if (v > Brixi && v < 30) {
                Brixf = v;
                return new AbstractMap.SimpleEntry<>(true, "");
            }
            else
                return new AbstractMap.SimpleEntry<>(false, context.getResources().getString(R.string.error_chaptalizationService_setTargetDegree_outOfRange));
        }
        catch (NullPointerException | NumberFormatException | ParseException ex) {
            return new AbstractMap.SimpleEntry<>(false, ex.getMessage());
        }
    }

    public Map.Entry<Boolean, String> trySetSugarDensity(String value) {
        if (value.equals(""))
            return new AbstractMap.SimpleEntry<>(false, context.getResources().getString(R.string.error_chaptalizationService_setSugarDensity_empty));
        try {
            Number number = format.parse(value);
            float v = Float.parseFloat(String.valueOf(number));
            if (v >= 90 && v <= 100) {
                sd = v;
                return new AbstractMap.SimpleEntry<>(true, "");
            }
            else
                return new AbstractMap.SimpleEntry<>(false, context.getResources().getString(R.string.error_chaptalizationService_setSugarDensity_outOfRange));
        }
        catch (NullPointerException | NumberFormatException | ParseException ex) {
            return new AbstractMap.SimpleEntry<>(false, ex.getMessage());
        }
    }

    public float getSugarMass() {
        calculateChaptalizationV1();
        return A;
    }

    // by www.vinolab.hr
    private void calculateChaptalizationV1() {
        double Sf = dissolvedSugarCalculator(Brixf);
        double Si = dissolvedSugarCalculator(Brixi);
        double C = ((double)Vi * (Sf - Si));
        A = (float) (C + (C - (C * sd / 100)));
    }

    // by www.brsquared.org
    private void calculateChaptalizationV2() {
        double Sf = dissolvedSugarTable(Brixf);
        double Si = dissolvedSugarTable(Brixi);
        double b = 1600;
        double C = ((double)Vi * (Sf - Si)) / (1 - (Sf / b));
        A = (float) (C + (C - (C * sd / 100)));
    }

    private double sugarGravityToBrix(double sg) {
        return  (143.254 * Math.pow(sg, 3)) - (648.670 * Math.pow(sg, 2)) + (1125.805 * sg) - 620.389;
    }

    private double brixToSugarGravity(double brix) {
        return (0.00000005785037196 * Math.pow(brix, 3)) + (0.00001261831344 * Math.pow(brix, 2)) + (0.003873042366 * brix) + 0.9999994636;
    }

    private double dissolvedSugarCalculator(double brix) {
        double sg = brixToSugarGravity(brix);
        return sg * brix * 10;
    }

    private double dissolvedSugarTable(double brix) {
        float sg = 1;
        CSVParser parser = new CSVParser();
        try {
            if (parser.parse(context, Constants.DATA_SOURCE_TABLE_SUGAR_GRAVITY)) {
                NumberFormat csvFormat = NumberFormat.getInstance(Locale.ENGLISH);
                int colsCount = parser.getColsCount();
                int rowsCount = parser.getRowsCount();
                int targetColIndex = 0;
                int targetRowIndex = 0;

                for (int i = 1; i < colsCount; i++) {
                    String el = parser.getElement(0, i);
                    if (!el.equals("")) {
                        Number number = csvFormat.parse(el);
                        if ((Math.abs(Float.parseFloat(String.valueOf(number)) - 20) < 0.001f)) {
                            targetColIndex = i;
                            break;
                        }
                    }
                }
                for (int j = 1; j < rowsCount; j++) {
                    String el = parser.getElement(j, targetColIndex);
                    if (!el.equals("")) {
                        Number number = csvFormat.parse(el);
                        if ((Math.abs(Float.parseFloat(String.valueOf(number)) - brix) < 0.001f)) {
                            targetRowIndex = j;
                            break;
                        }
                    }
                }
                String el = parser.getElement(targetRowIndex, 0);
                if (!el.equals("")) {
                    Number number = csvFormat.parse(el);
                    sg = Float.parseFloat(String.valueOf(number));
                }
            }
        }
        catch (Resources.NotFoundException | IOException | ParseException ignored) {
            //System.out.println(ex.fillInStackTrace());
        }

        return sg * brix * 10;
    }
}